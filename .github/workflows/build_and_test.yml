# https://help.github.com/en/categories/automating-your-workflow-with-github-actions

name: Build and Test

on:
  push:
    path-ignore:
      - 'README.md'

  pull_request:
    branches:
      - 'master'
      - 'develop'

# Workflows
jobs:
  build:

    name: ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        name:
          - ubuntu-18.04
          - macOS-latest
          - windows-latest

        include:
          - name: ubuntu-18.04
            os: ubuntu-18.04
            dotnet: '2.2.402'
            framework: 'netcoreapp2.2'
          - name: macOS-latest
            os: macOS-latest
            dotnet: '2.2.402'
            framework: 'netcoreapp2.2'
          - name: windows-latest
            os: windows-latest
            dotnet: '2.2.402'
            framework: 'netcoreapp2.2'

    env:
      COREHOST_TRACE: false
      # Disable sending usage data to Microsoft
      DOTNET_CLI_TELEMETRY_OPTOUT: 1
      # prevent the caching of the packages on the build machine
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
      # prevent the download of the XML documentation for the packages
      NUGET_XMLDOC_MODE: skip
      CODACY_COVERAGE_VERSION: 1.0.7

    steps:
      - uses: actions/checkout@v1

      - name: Setup .Net ${{ matrix.dotnet }}
        if: (runner.os == 'macOS' || runner.os == 'Linux')
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ matrix.dotnet }}

      - uses: actions/cache@v1
        name: Setup dotnet cache
        id: dotnet-cache
        with:
          path: ~/.dotnet
          key: ${{ runner.os }}-dotnet-${{ hashFiles('**/SignNow*/*.csproj') }}
          restore-keys: ${{ runner.os }}-dotnet-

      - uses: actions/cache@v1
        name: Setup nuget cache
        id: nuget-cache
        with:
          path: ~/.nuget
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/SignNow*/*.csproj') }}
          restore-keys: ${{ runner.os }}-nuget-

      - name: Setup .Net Tools
        env:
          DOTNET_ROOT: ${{ runner.tool_cache }}/dncs/${{ matrix.dotnet }}/x64
        run: |
          dotnet tool install --global InheritDocTool
          dotnet tool install --global coverlet.console
          echo "::add-path::$HOME/.dotnet/tools"
          # echo ::set-env name=PATH::/home/runner/.dotnet/tools/:$PATH

      - name: Restore Nuget packages
        run: |
          dotnet restore -v:n

      - name: Configure SignNow account
        run: |
          mkdir $HOME/Pass
          echo '${{ secrets.TEST_CREDITS_JSON }}' >> $HOME/Pass/api-eval.signnow.com.json
          echo '${{ secrets.TEST_ACCOUNT_JSON }}' >> $HOME/Pass/app-eval.signnow.com.json

      - name: Build for ${{ matrix.framework }}
        run: |
          dotnet build ./SignNow.Net.Test/SignNow.Net.Test.csproj --framework ${{ matrix.framework }}

      - name: Run Tests on ${{ matrix.framework }}
        env:
          TEST_ASSEMBLY: ./SignNow.Net.Test/bin/Debug/${{ matrix.framework }}/SignNow.Net.Test.dll
          TEST_ARGS: test ./SignNow.Net.Test/SignNow.Net.Test.csproj --no-build --framework ${{ matrix.framework }}
          COVERAGE_OUTPUT: ./SignNow.Net.Test/bin/Debug
        shell: pwsh
        run: |
          coverlet $env:TEST_ASSEMBLY --target="dotnet" --targetargs="$env:TEST_ARGS" --format=opencover --format=json --merge-with=$env:COVERAGE_OUTPUT/coverage.json --output=$env:COVERAGE_OUTPUT/

      # Build and test for .Net 4.5 (Windows Only)
      - name: Build for .Net 4.5
        if: runner.os == 'Windows'
        run: |
          dotnet build ./SignNow.Net.Test/SignNow.Net.Test.csproj --framework net45

      - name: Run Tests on .Net 4.5
        if: runner.os == 'Windows'
        env:
          TEST_ASSEMBLY: ./SignNow.Net.Test/bin/Debug/net45/SignNow.Net.Test.dll
          TEST_ARGS: test ./SignNow.Net.Test/SignNow.Net.Test.csproj --no-build --framework net45
          COVERAGE_OUTPUT: ./SignNow.Net.Test/bin/Debug/
        shell: pwsh
        run: |
          coverlet $env:TEST_ASSEMBLY --target="dotnet" --targetargs="$env:TEST_ARGS" --format=opencover --format=json --merge-with=$env:COVERAGE_OUTPUT/coverage.json --output=$env:COVERAGE_OUTPUT/

      - name: Send coverage to Codacy
        if: (runner.os == 'macOS' || runner.os == 'Linux')
        run: |
          if [ "${{ runner.os }}" = "macOS" ]; then
            curl -Ls "https://github.com/codacy/csharp-codacy-coverage/releases/download/$CODACY_COVERAGE_VERSION/Codacy.CSharpCoverage_osx-x64" --output codacy
          fi

          if [ "${{ runner.os }}" = "Linux" ]; then
            curl -Ls "https://github.com/codacy/csharp-codacy-coverage/releases/download/$CODACY_COVERAGE_VERSION/Codacy.CSharpCoverage_linux-x64" --output codacy
          fi

          chmod +x ./codacy
          ./codacy -c $GITHUB_SHA -t ${{ secrets.CODACY_PROJECT_TOKEN }} -r ./SignNow.Net.Test/bin/Debug/coverage.opencover.xml -e opencover


      - name: Upload code coverage report
        continue-on-error: true
        uses: codecov/codecov-action@v1
        with:
          name: codecov-develop-${{ matrix.os }}
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./SignNow.Net.Test/bin/Debug/coverage.opencover.xml
          fail_ci_if_error: false

